{"version":3,"sources":["components/Movie.js","routes/Home.js","routes/About.js","components/Navigation.js","App.js","index.js"],"names":["Movie","id","year","title","summary","poster","genres","className","src","alt","map","genre","index","key","slice","Home","state","isLoading","movies","getMovies","a","async","axios","get","data","setState","this","movie","medium_cover_image","Component","About","Navigation","to","App","path","exact","component","ReactDOM","render","document","getElementById"],"mappings":"2TAiCeA,G,MA7BD,SAAC,GAAiD,EAA/CC,GAAgD,IAA5CC,EAA2C,EAA3CA,KAAMC,EAAqC,EAArCA,MAAOC,EAA8B,EAA9BA,QAASC,EAAqB,EAArBA,OAAQC,EAAa,EAAbA,OACjD,OACE,yBAAKC,UAAU,SACb,yBAAKC,IAAKH,EAAQI,IAAKN,EAAOA,MAAOA,IACrC,yBAAKI,UAAU,iBACb,wBAAIA,UAAU,gBAAgBJ,GAC9B,wBAAII,UAAU,eAAeL,GAC7B,wBAAIK,UAAU,UACXD,EAAOI,KAAI,SAACC,EAAOC,GAAR,OACV,wBAAIC,IAAKD,EAAOL,UAAU,iBACvBI,OAIP,uBAAGJ,UAAU,kBAAkBH,EAAQU,MAAM,EAAG,KAAhD,WC6COC,G,iNAzDbC,MAAQ,CACNC,WAAW,EACXC,OAAQ,I,EAGVC,UAAY,4BAAAC,EAAAC,OAAA,kEAAAD,EAAA,MAKAE,IAAMC,IACd,6DANQ,gBAGEL,EAHF,EAERM,KACEA,KAAQN,OAOZ,EAAKO,SAAS,CAAEP,SAAQD,WAAW,IAVzB,sC,mFAaVS,KAAKP,c,+BAEG,IAAD,EACuBO,KAAKV,MAA3BC,EADD,EACCA,UAAWC,EADZ,EACYA,OACnB,OACE,6BAASX,UAAU,aAChBU,EACC,yBAAKV,UAAU,UACb,mCACA,mCACA,mCACA,mCACA,mCACA,mCACA,oCAGF,yBAAKA,UAAU,UACZW,EAAOR,KAAI,SAAAiB,GAEV,OACE,kBAAC,EAAD,CACEd,IAAKc,EAAM1B,GACXA,GAAI0B,EAAM1B,GACVC,KAAMyB,EAAMzB,KACZC,MAAOwB,EAAMxB,MACbC,QAASuB,EAAMvB,QACfC,OAAQsB,EAAMC,mBACdtB,OAAQqB,EAAMrB,kB,GA/CbuB,cCCJC,MAJf,WACE,OAAO,oFCSMC,MATf,WACE,OACE,6BACE,kBAAC,IAAD,CAAMC,GAAG,KAAT,QACA,kBAAC,IAAD,CAAMA,GAAG,UAAT,WCWSC,EAZH,WACV,OAGE,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAO,EAAMC,UAAWrB,IACxC,kBAAC,IAAD,CAAOmB,KAAK,SAASE,UAAWN,MCTtCO,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.61187f74.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./Movie.css\";\r\n\r\nconst Movie = ({ id, year, title, summary, poster, genres }) => {\r\n  return (\r\n    <div className=\"movie\">\r\n      <img src={poster} alt={title} title={title} />\r\n      <div className=\"movies__movie\">\r\n        <h3 className=\"movie__title\">{title}</h3>\r\n        <h5 className=\"movie__year\">{year}</h5>\r\n        <ul className=\"genres\">\r\n          {genres.map((genre, index) => (\r\n            <li key={index} className=\"genres__genre\">\r\n              {genre}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n        <p className=\"movie__summary\">{summary.slice(0, 140)}...</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nMovie.propTypes = {\r\n  id: PropTypes.number.isRequired,\r\n  year: PropTypes.number.isRequired,\r\n  title: PropTypes.string.isRequired,\r\n  summary: PropTypes.string.isRequired,\r\n  poster: PropTypes.string.isRequired,\r\n  genres: PropTypes.arrayOf(PropTypes.string).isRequired\r\n};\r\n\r\nexport default Movie;\r\n","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport Movie from \"../components/Movie\";\r\nimport \"./Home.css\";\r\n\r\nclass Home extends Component {\r\n  state = {\r\n    isLoading: true,\r\n    movies: []\r\n  };\r\n  //동기화, axios가 끝날 때까지 기다린다\r\n  getMovies = async () => {\r\n    const {\r\n      data: {\r\n        data: { movies }\r\n      }\r\n    } = await axios.get(\r\n      \"https://yts-proxy.now.sh/list_movies.json?sort_by=rating\"\r\n    );\r\n\r\n    //console.log(movies);\r\n    this.setState({ movies, isLoading: false }); //movies하나만 써도 된다. ES6 하나는 배열, 하나는 axios\r\n  };\r\n  componentDidMount() {\r\n    this.getMovies();\r\n  }\r\n  render() {\r\n    const { isLoading, movies } = this.state;\r\n    return (\r\n      <section className=\"container\">\r\n        {isLoading ? (\r\n          <div className=\"loader\">\r\n            <span>L</span>\r\n            <span>O</span>\r\n            <span>A</span>\r\n            <span>D</span>\r\n            <span>I</span>\r\n            <span>N</span>\r\n            <span>G</span>\r\n          </div>\r\n        ) : (\r\n          <div className=\"movies\">\r\n            {movies.map(movie => {\r\n              //console.log(movie);\r\n              return (\r\n                <Movie\r\n                  key={movie.id}\r\n                  id={movie.id}\r\n                  year={movie.year}\r\n                  title={movie.title}\r\n                  summary={movie.summary}\r\n                  poster={movie.medium_cover_image}\r\n                  genres={movie.genres}\r\n                />\r\n              );\r\n            })}\r\n          </div>\r\n        )}\r\n      </section>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;\r\n","import React from \"react\";\r\n\r\nfunction About() {\r\n  return <span>About this page: I built it because I love movie.</span>;\r\n}\r\n\r\nexport default About;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction Navigation() {\r\n  return (\r\n    <div>\r\n      <Link to=\"/\">Home</Link>\r\n      <Link to=\"/about\">About</Link>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Navigation;\r\n","import React from \"react\";\nimport { HashRouter, Route } from \"react-router-dom\";\nimport Home from \"./routes/Home\";\nimport About from \"./routes/About\";\nimport Navigation from \"./components/Navigation\";\n\nconst App = () => {\n  return (\n    //같은 주소 부분을 포함하고 있으면 같이 나타낸다\n    //exact를 사용해서 정확한 주소 부분을 포함한 것만 나타나게 할 수 있다\n    <HashRouter>\n      <Navigation />\n      <Route path=\"/\" exact={true} component={Home} />\n      <Route path=\"/about\" component={About} />\n    </HashRouter>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}